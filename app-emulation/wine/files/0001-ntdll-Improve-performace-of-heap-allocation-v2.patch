From adad194c0967859a02a60732c15cfaeb8a0dc7f9 Mon Sep 17 00:00:00 2001
From: Andrea Canciani <ranma42@gmail.com>
Date: Sat, 25 Feb 2012 23:11:52 +0100
Subject: [PATCH 1/5] ntdll: Improve performace of heap allocation (v2)

The i-th freelist contains blocks of size Y <= HEAP_freeListSizes[i].

When looking for a block of size X <= HEAP_freeListSizes[i], searching
through the i-th freelist, might provide better compactness, but there
might be no block sufficient to accomodate the size X.

Instead, the allocation can be performed from the next freelist, whose
blocks are guaranteed to be big enough for X to be allocated, hence
the visit of the freelist only takes O(1) passes in this case.

This can lead to worse compacteness of the heap, but can greatly
improve the allocation performance.

V2: some cleanup
---
 dlls/ntdll/heap.c |   22 +++++++++++++++++++---
 1 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/heap.c b/dlls/ntdll/heap.c
index 6ca509a..e27ffe4 100644
--- a/dlls/ntdll/heap.c
+++ b/dlls/ntdll/heap.c
@@ -116,7 +116,8 @@ C_ASSERT( sizeof(ARENA_LARGE) % LARGE_ALIGNMENT == 0 );
 /* Max size of the blocks on the free lists */
 static const SIZE_T HEAP_freeListSizes[] =
 {
-    0x10, 0x20, 0x30, 0x40, 0x60, 0x80, 0x100, 0x200, 0x400, 0x1000, ~0UL
+    0x8, 0x10, 0x20, 0x30, 0x40, 0x60, 0x80, 0x100, 0x200, 0x400, 0x1000,
+    0x10000, 0x100000, 0x1000000, 0x10000000, ~0UL
 };
 #define HEAP_NB_FREE_LISTS  (sizeof(HEAP_freeListSizes)/sizeof(HEAP_freeListSizes[0]))
 
@@ -307,6 +308,20 @@ static inline unsigned int get_freelist_index( SIZE_T size )
     return i;
 }
 
+/* compute the smallest index whose elements are at least as big as size */
+/* size is the size of the whole block including the arena header */
+static inline unsigned int get_freelist_index_at_least( SIZE_T size )
+{
+    return get_freelist_index(size);
+}
+
+/* compute the smallest index whose elements are at most as big as size */
+/* size is the size of the whole block including the arena header */
+static inline unsigned int get_freelist_index_at_most( SIZE_T size )
+{
+    return get_freelist_index(size + 1) - 1;
+}
+
 /* get the memory protection type to use for a given heap */
 static inline ULONG get_protection_type( DWORD flags )
 {
@@ -466,7 +481,8 @@ static HEAP *HEAP_GetPtr(
  */
 static inline void HEAP_InsertFreeBlock( HEAP *heap, ARENA_FREE *pArena, BOOL last )
 {
-    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index( pArena->size + sizeof(*pArena) );
+    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index_at_most( pArena->size + sizeof(*pArena) );
+
     if (last)
     {
         /* insert at end of free list, i.e. before the next free list entry */
@@ -992,7 +1008,7 @@ static ARENA_FREE *HEAP_FindFreeBlock( HEAP *heap, SIZE_T size,
     SUBHEAP *subheap;
     struct list *ptr;
     SIZE_T total_size;
-    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index( size + sizeof(ARENA_INUSE) );
+    FREE_LIST_ENTRY *pEntry = heap->freeList + get_freelist_index_at_least( size + sizeof(ARENA_INUSE) );
 
     /* Find a suitable free list, and in it find a block large enough */
 
-- 
1.7.7.5 (Apple Git-26)

